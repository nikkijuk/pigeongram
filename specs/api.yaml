openapi: 3.0.3
info:
  title: Cosmosdb sample
  description: Cosmosdb sample
  version: 1.0.0
# defining base url might not work as expected
# https://github.com/kongchen/swagger-maven-plugin/issues/730
#servers:
#  - url: test
paths:

  /users:
    # create new user
    post:
      operationId: "createUser"
      description: "add user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: "saved user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # get all users
    get:
      operationId: "findUsers"
      description: "get all users"
      responses:
        '200':
          description: "User response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    # get single user
    get:
      summary: "Get user by user id"
      description: "get single user with id"
      operationId: "getUserById"
      parameters:
        - name: id
          in: path
          description: "id of user"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "User response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found with given id"

  # get all messages
  /messages:
    get:
      operationId: "findMessages"
      description: "get all messages"
      responses:
        '200':
          description: "Message response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailMessage'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # sync all messages
  /messages/sync:
    get:
      operationId: "syncMessages"
      description: "sync and return all messages"
      responses:
        '200':
          description: "Message response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailMessage'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:

    # generic error structure
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    # address of user
    Address:
      type: "object"
      required:
        - street
        - postalcode
        - city
      properties:
        street:
          type: "string"
        postalcode:
          type: "string"
        city:
          type: "string"
      xml:
        name: "Address"

    # user
    User:
      type: "object"
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: string
        firstName:
          type: "string"
        lastName:
          type: "string"
        addresses:
          type: "array"
          xml:
            name: "Address"
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"

    # email address
    EmailAddress:
      type: "object"
      required:
        - name
        - address
      properties:
        name:
          type: "string"
        address:
          type: "string"
          format: email

    # communication party
    CommunicationParty:
      type: "object"
      required:
        - emailAddress # EmailAddress
      properties:
        emailAddress:
          $ref: "#/components/schemas/EmailAddress"

    # message content
    MessageContent:
      type: "object"
      required:
        - contentType
        - content
      properties:
        contentType:
          type: "string"
        content:
          type: "string"

    # email message
    # many attributes are left out at that moment
    EmailMessage:
      type: "object"
      required:
      - id
      - type
      #!- createdDateTime
      #!- lastModifiedDateTime
      #!- changeKey
      #!- categories # array
      - receivedDateTime
      - sentDateTime
      - hasAttachments # boolean
      - internetMessageId
      - subject
      #!- bodyPreview
      #!- importance
      #!- parentFolderId
      #!- conversationId
      #!- isDeliveryReceiptRequested
      #!- isReadReceiptRequested
      #!- isRead
      #!- isDraft
      #!- webLink # http link
      #!- inferenceClassification
      - body # content
      - sender # party
      - from # party
      - toRecipients # array of party
        #- ccRecipients  # array of party
        #- bccRecipients # array of party
        #!- replyTo # array of ?
      properties:
        id:
          type: "string"
        type:
          type: "string"
        receivedDateTime:
          type: "string"
          format: "date-time"
        sentDateTime:
          type: "string"
          format: "date-time"
        hasAttachments: # boolean
          type: "boolean"
        internetMessageId:
          type: "string"
        subject:
          type: "string"
        body: # content
          $ref: "#/components/schemas/MessageContent"
        sender: # party
          $ref: "#/components/schemas/CommunicationParty"
        from: # party
          $ref: "#/components/schemas/CommunicationParty"
        toRecipients: # array of party
          type: "array"
          xml:
            name: "Recipient"
            wrapped: true
          items:
            $ref: "#/components/schemas/CommunicationParty"
        ccRecipients: # array of party
          type: "array"
          xml:
            name: "Recipient"
            wrapped: true
          items:
            $ref: "#/components/schemas/CommunicationParty"
        bccRecipients: # array of party
          type: "array"
          xml:
            name: "Recipient"
            wrapped: true
          items:
            $ref: "#/components/schemas/CommunicationParty"



