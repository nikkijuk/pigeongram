openapi: 3.0.3
info:
  title: PigeonGram
  description: |
    PigeonGram sample app.
  version: 1.0.0
  x-audience: component-internal
  x-api-id: pigeongram
  contact:
    name: nikkijuk
    email: x@x.com
    url: https://github.com/nikkijuk

servers:
  - url: "https://pigeongram.on.inter.net"
    description: Pigeongram running here

paths:

  /users:
    # create new user
    post:
      operationId: 'createUser'
      description: 'add user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'saved user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: 'Error object'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
      security: []   # No security

    # get all users
    get:
      operationId: 'findUsers'
      description: 'get all users'
      responses:
        '200':
          description: 'User response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        default:
          description: 'Error object'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
      security: []   # No security

  /users/{id}:
    # get single user
    get:
      summary: 'Get user by user id'
      description: 'get single user with id'
      operationId: 'getUserById'
      parameters:
        - name: id
          in: path
          description: 'id of user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid id supplied'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'User not found with given id'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
        default:
          description: 'Error object'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
      security: []   # No security

  # get all messages
  /messages:
    get:
      operationId: 'findMessages'
      description: 'get all messages'
      responses:
        '200':
          description: 'Message response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
        default:
          description: 'Error object'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
      security: []   # No security

  # sync all messages
  /messages/sync:
    get:
      operationId: 'syncMessages'
      description: 'sync and return all messages'
      responses:
        '200':
          description: 'Message response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
        default:
          description: 'Error object'
          content:
            application/problem+json:
              schema:
                #$ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
                $ref: '#/components/schemas/Problem'
      security: []   # No security

components:
  schemas:

    UsersResponse:
      type: object
      description: Users Response
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: List of users

    MessagesResponse:
      type: object
      description: Messages Response
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/EmailMessage'
          description: List of messages


    # generic error structure
    # TODO: Replace with json problem
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    # address of user
    Address:
      type: 'object'
      required:
        - street
        - postalcode
        - city
      properties:
        street:
          type: 'string'
        postalcode:
          type: 'string'
        city:
          type: 'string'
      xml:
        name: 'Address'

    # user
    User:
      type: 'object'
      required:
        - id
        - first_name
        - last_name
      properties:
        id:
          type: string
        first_name:
          type: 'string'
        last_name:
          type: 'string'
        addresses:
          type: 'array'
          xml:
            name: 'Address'
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'

    # email address
    EmailAddress:
      type: 'object'
      required:
        - name
        - address
      properties:
        name:
          type: 'string'
        address:
          type: 'string'
          format: email

    # message content
    MessageContent:
      type: 'object'
      required:
        - content_type
        - content
      properties:
        content_type:
          type: 'string'
        content:
          type: 'string'

    # email message
    # many attributes are left out at that moment
    EmailMessage:
      type: 'object'
      required:
        - id
        - type
        #!- createdAt
        #!- lastModifiedAt
        #!- changeKey
        #!- categories # array
        - received_at
        - sent_at
        - has_attachments # boolean
        - internet_message_id
        - subject
        #!- bodyPreview
        #!- importance
        #!- parentFolderId
        #!- conversationId
        #!- isDeliveryReceiptRequested
        #!- isReadReceiptRequested
        #!- isRead
        #!- isDraft
        #!- webLink # http link
        #!- inferenceClassification
        - body # content
        #!- sender # party
        - from # party
        - to_recipients # array of party
          #- ccRecipients  # array of party
          #- bccRecipients # array of party
        #!- replyTo # array of ?
      properties:
        id:
          type: 'string'
        type:
          type: 'string'
        received_at:
          type: 'string'
          format: 'date-time'
        sent_at:
          type: 'string'
          format: 'date-time'
        has_attachments: # boolean
          type: 'boolean'
        internet_message_id:
          type: 'string'
        subject:
          type: 'string'
        body: # content
          $ref: '#/components/schemas/MessageContent'
        from: # party
          $ref: '#/components/schemas/EmailAddress'
        to_recipients: # array of party
          type: 'array'
          xml:
            name: 'Recipient'
            wrapped: true
          items:
            $ref: '#/components/schemas/EmailAddress'
        cc_recipients: # array of party
          type: 'array'
          xml:
            name: 'Recipient'
            wrapped: true
          items:
            $ref: '#/components/schemas/EmailAddress'
        bcc_recipients: # array of party
          type: 'array'
          xml:
            name: 'Recipient'
            wrapped: true
          items:
            $ref: '#/components/schemas/EmailAddress'

# Copy from zalando
# commented out uri format as generated kotlin code didn't compile

    Problem:
      type: object
      properties:
        type:
          type: string
          # commented out uri format as generated kotlin code didn't compile
          format: string
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'https://zalando.github.io/problem/constraint-violation'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          # commented out uri format as generated kotlin code didn't compile
          format: string
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.


